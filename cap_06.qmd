---
title: "Cap 6 - Fitting Models with parsnip"
author: "Caio Sain Vallio"
format: 
    html:
      toc: true
      self-contained: true
      code-fold: show
execute: 
  warning: false
---


# Create a Model

```{r}
library(tidymodels)
tidymodels_prefer()
data(ames)

ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
set.seed(502)
ames_split <- initial_split(ames, prop = 0.80, strata =
Sale_Price)
ames_train <- training(ames_split)
ames_test <- testing(ames_split)

```



```{r}
linear_reg() %>% set_engine("lm")

linear_reg() %>% set_engine("glmnet")

linear_reg() %>% set_engine("stan")

```


```{r}
linear_reg() %>% set_engine("lm") %>% translate()


linear_reg(penalty = 1) %>% set_engine("glmnet") %>% translate()


linear_reg() %>% set_engine("stan") %>% translate()

```


```{r}
lm_model <-
  linear_reg() %>%
  set_engine("lm")

lm_model


lm_form_fit <-
  lm_model %>%
  # Recall that Sale_Price has been pre-logged
  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)

lm_form_fit


lm_xy_fit <-
  lm_model %>%
  fit_xy(
    x = ames_train %>% select(Longitude, Latitude),
    y = ames_train %>% pull(Sale_Price)
  )

lm_xy_fit

```


```{r}
rand_forest(trees = 1000, min_n = 5) %>%
  set_engine("ranger") %>%
  set_mode("regression") %>%
  translate()
```


Modeling functions in parsnip separate model arguments into two categories:

*Main arguments*    
  More commonly used and tend to be available across engines

*Engine arguments*    
  Either specific to a particular engine or used more rarely



```{r}
rand_forest(trees = 1000, min_n = 5) %>%
  set_engine("ranger", verbose = TRUE) %>%
  set_mode("regression")

```


# Use the Model Results


```{r}
lm_form_fit %>% extract_fit_engine()
```


```{r}
lm_form_fit %>% extract_fit_engine() %>% vcov()
```


```{r}
model_res <-
  lm_form_fit %>%
  extract_fit_engine() %>%
  summary()

# The model coefficient table is accessible via the `coef` method.
param_est <- coef(model_res)
class(param_est)

param_est

```

```{r}
tidy(lm_form_fit)
```


# Make Predictions


```{r}
ames_test_small <- ames_test %>% slice(1:5)
predict(lm_form_fit, new_data = ames_test_small)

```

```{r}
ames_test_small %>%
  select(Sale_Price) %>%
  bind_cols(predict(lm_form_fit, ames_test_small)) %>%
  # Add 95% prediction intervals to the results:
  bind_cols(predict(lm_form_fit, ames_test_small, type = "pred_int"))

```

```{r}
tree_model <-
  decision_tree(min_n = 2) %>%
  set_engine("rpart") %>%
  set_mode("regression")

tree_fit <-
  tree_model %>%
  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)

ames_test_small %>%
  select(Sale_Price) %>%
  bind_cols(predict(tree_fit, ames_test_small))

```



# Creating Model Specifications


```{r}
# parsnip_addin()

```



























